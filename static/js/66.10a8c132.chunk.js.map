{"version":3,"file":"static/js/66.10a8c132.chunk.js","mappings":"kNAyEA,QApEA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC7B,cAAEK,EAAa,aAAEC,EAAY,SAAEC,EAAQ,kBAAEC,IAAsBC,EAAAA,EAAAA,KAC/DC,GAAWC,EAAAA,EAAAA,MAkCjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,MAAA,QAAMC,SAlCUC,UAClBC,EAAMC,iBAEN,IACE,MAAMC,QAAiBC,MAAM,uEAA+C,CAC1EC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE5B,WAAUG,eAG7B0B,QAAaP,EAASQ,OAE5B,GAAIR,EAASS,GAAI,CACfxB,GAAc,GACdC,EAAaqB,EAAKG,WAClBvB,EAASoB,EAAKI,OAGd,MAAMC,GAAiBC,EAAAA,EAAAA,IAAMN,EAAKO,WAAY,WAAY,IAAIC,MAAQC,cACtE5B,EAAkBwB,GAGlBtB,EAAS,IACX,MACEN,EAASuB,EAAKU,SAAW,eAE7B,CAAE,MAAOC,GACPC,QAAQpC,MAAM,eAAgBmC,GAC9BlC,EAAS,uCACX,GAK+BS,UAAU,sBAAqBC,SAAA,EAC1DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,WACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,SACE4B,KAAK,OACLC,MAAO3C,EACP4C,SAAWC,GAAM5C,EAAY4C,EAAEC,OAAOH,OACtCI,YAAY,WACZC,UAAQ,OAGZlC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,SACE4B,KAAK,WACLC,MAAOxC,EACPyC,SAAWC,GAAMzC,EAAYyC,EAAEC,OAAOH,OACtCI,YAAY,WACZC,UAAQ,MAGX3C,IAASS,EAAAA,EAAAA,KAAA,KAAGmC,MAAO,CAAEC,MAAO,OAAQlC,SAAEX,KACvCS,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAQ1B,SAAC,cAI9B,C","sources":["pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { parse } from 'date-fns';\r\nimport { useUser } from '../contexts/UserContext';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const { setIsLoggedIn, setTeacherId, setToken, setExpirationDate } = useUser();\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/Main/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setIsLoggedIn(true);\r\n        setTeacherId(data.teacherId);\r\n        setToken(data.token);\r\n\r\n        // Properly parse expiration date\r\n        const expirationDate = parse(data.expiration, 'M/d/yyyy', new Date()).toISOString();\r\n        setExpirationDate(expirationDate);\r\n\r\n        // Redirect to home page\r\n        navigate('/');\r\n      } else {\r\n        setError(data.message || 'Login failed');\r\n      }\r\n    } catch (err) {\r\n      console.error('Login Error:', err);\r\n      setError('An error occurred. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-register-wrapper\">\r\n      <form onSubmit={handleLogin} className=\"login-register-form\">\r\n        <h2>Login</h2>\r\n        <div className=\"form-element\">\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            placeholder=\"Username\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-element\">\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n        </div>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"names":["username","setUsername","useState","password","setPassword","error","setError","setIsLoggedIn","setTeacherId","setToken","setExpirationDate","useUser","navigate","useNavigate","_jsx","className","children","_jsxs","onSubmit","async","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","teacherId","token","expirationDate","parse","expiration","Date","toISOString","message","err","console","type","value","onChange","e","target","placeholder","required","style","color"],"sourceRoot":""}