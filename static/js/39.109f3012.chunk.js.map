{"version":3,"file":"static/js/39.109f3012.chunk.js","mappings":"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","sources":["../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/_lib/normalizeDates.js","../node_modules/date-fns/startOfYear.js","../node_modules/date-fns/getDayOfYear.js","../node_modules/date-fns/_lib/addLeadingZeros.js","../node_modules/date-fns/_lib/format/lightFormatters.js","../node_modules/date-fns/_lib/format/formatters.js","../node_modules/date-fns/isDate.js","../node_modules/date-fns/isValid.js","../node_modules/date-fns/format.js","../node_modules/date-fns/isWithinInterval.js","../node_modules/date-fns/parseISO.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link isWithinInterval} function options.\n */\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param date - The date to check\n * @param interval - The interval to check\n * @param options - An object with options\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => false\n *\n * @example\n * // For date equal to the interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to the interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nexport function isWithinInterval(date, interval, options) {\n  const time = +toDate(date, options?.in);\n  const [startTime, endTime] = [\n    +toDate(interval.start, options?.in),\n    +toDate(interval.end, options?.in),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n\n// Fallback for modularized imports:\nexport default isWithinInterval;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n"],"names":["startOfDay","date","options","_date","toDate","in","setHours","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","context","_len","arguments","length","dates","Array","_key","normalize","constructFrom","bind","find","map","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","getTimezoneOffsetInMilliseconds","earlierTimestamp","Math","round","millisecondsInDay","startOfYear","date_","setFullYear","getFullYear","getDayOfYear","addLeadingZeros","number","targetLength","abs","toString","padStart","lightFormatters","y","token","signedYear","year","M","month","getMonth","String","d","getDate","a","dayPeriodEnumValue","getHours","toUpperCase","h","H","m","getMinutes","s","getSeconds","S","numberOfDigits","milliseconds","getMilliseconds","trunc","pow","dayPeriodEnum","formatters","G","localize","era","width","ordinalNumber","unit","Y","signedWeekYear","getWeekYear","weekYear","R","getISOWeekYear","u","Q","quarter","ceil","q","L","w","week","getWeek","I","isoWeek","getISOWeek","D","dayOfYear","E","dayOfWeek","getDay","day","e","localDayOfWeek","weekStartsOn","c","i","isoDayOfWeek","dayPeriod","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","undefined","sign","absOffset","minutes","isDate","value","Date","Object","prototype","call","isValid","isNaN","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","defaultOptions","getDefaultOptions","locale","defaultLocale","firstWeekContainsDate","originalDate","RangeError","parts","match","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","warnOrThrowProtectedError","formatter","input","matched","replace","isWithinInterval","interval","time","startTime","endTime","start","end","sort","parseISO","argument","invalidDate","NaN","additionalDigits","dateStrings","dateString","array","split","patterns","dateTimeDelimiter","timeString","test","timeZoneDelimiter","substr","timezone","exec","splitDateString","parseYearResult","regex","RegExp","captures","restDateString","parseInt","century","slice","parseYear","dateRegex","isWeekDate","parseDateUnit","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","parseDate","timestamp","timeRegex","parseTimeUnit","seconds","validateTime","millisecondsInHour","millisecondsInMinute","parseTime","tmpDate","result","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","timezoneString","timezoneRegex","_hours","validateTimezone","parseTimezone","parseFloat"],"sourceRoot":""}