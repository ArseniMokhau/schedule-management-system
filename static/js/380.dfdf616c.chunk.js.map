{"version":3,"file":"static/js/380.dfdf616c.chunk.js","mappings":"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","sources":["../node_modules/date-fns/endOfWeek.js","../node_modules/date-fns/addWeeks.js","components/WeeklySchedule.js","data/Enums.js","data/CampusData.js","pages/Classroom.js","../node_modules/date-fns/addDays.js"],"sourcesContent":["import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfWeek} function options.\n */\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport function endOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setDate(_date.getDate() + diff);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfWeek;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link addWeeks} function options.\n */\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of weeks to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n * @param options - An object with options\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount, options) {\n  return addDays(date, amount * 7, options);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format, startOfWeek, endOfWeek, parseISO, isWithinInterval, addWeeks } from 'date-fns';\r\nimport { ScheduleType } from '../data/Enums';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport Spinner from './Spinner';\r\n\r\nfunction WeeklySchedule({ id, scheduleType, refreshTrigger }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [classes, setClasses] = useState([]);\r\n  const { isLoggedIn, teacherId, token} = useUser();\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [selectedWeek, setSelectedWeek] = useState(new Date(), 'Europe/Warsaw');\r\n\r\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n  const fetchClasses = useCallback(async () => {\r\n    let endpoint;\r\n\r\n    switch (scheduleType) {\r\n      case ScheduleType.TEACHER:\r\n        endpoint = `${process.env.REACT_APP_API_URL}/Main/${id}/room/all`;\r\n        break;\r\n      case ScheduleType.ROOM:\r\n        endpoint = `${process.env.REACT_APP_API_URL}/Main/classes/${id}/id`;\r\n        break;\r\n      // Future-proofing\r\n      default:\r\n        throw new Error('Invalid schedule type');\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(endpoint);\r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching classes: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      setClasses(data);\r\n      setErrorMessage(null);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching classes:', error);\r\n      setErrorMessage('Failed to load class data. Please try again later.');\r\n      setLoading(false);\r\n    }\r\n  }, [id, scheduleType]);\r\n\r\n  useEffect(() => {\r\n    fetchClasses();\r\n  }, [fetchClasses, refreshTrigger]);\r\n\r\n  const organizeClassesByWeek = () => {\r\n    const weekStart = startOfWeek(selectedWeek, { weekStartsOn: 1 });\r\n    const weekEnd = endOfWeek(selectedWeek, { weekStartsOn: 1 });\r\n  \r\n    const normalizeTime = (time) => (time === \"1.00:00:00\" ? \"24:00:00\" : time);\r\n  \r\n    const parseTime = (time) => parseISO(`2000-01-01T${normalizeTime(time)}`);\r\n  \r\n    const calculateWeekParity = (date) => {\r\n      const startDate = new Date(2024, 0, 1); // January 1, 2024\r\n      const daysSinceStart = Math.floor((date - startDate) / (1000 * 60 * 60 * 24));\r\n      const weekNumber = Math.floor(daysSinceStart / 7) + 1;\r\n      return weekNumber % 2 === 0 ? \"even\" : \"odd\";\r\n    };\r\n  \r\n    const currentWeekParity = calculateWeekParity(selectedWeek); // Determine parity of selected week\r\n  \r\n    const weeklySchedule = daysOfWeek.map(() => []);\r\n  \r\n    const remapDayIndex = (dayIndex) => (dayIndex === 0 ? 6 : dayIndex - 1);\r\n  \r\n    classes.forEach((classData) => {\r\n      // Process recurring classes\r\n      classData.recurringClasses.forEach((recurringClass) => {\r\n        const convertToISODate = (dateString) => {\r\n          const [month, day, year] = dateString.split('/');\r\n          return new Date(`${year}-${month}-${day}`).toISOString(); // Return ISO format directly\r\n        };\r\n  \r\n        const isClassCanceledForWeek = recurringClass.canceledDates.some((canceledDate) => {\r\n          const isoDate = convertToISODate(canceledDate); // Convert to ISO format\r\n          const parsedCanceledDate = parseISO(isoDate); // Parse the ISO date\r\n  \r\n          return isWithinInterval(parsedCanceledDate, { start: weekStart, end: weekEnd });\r\n        });\r\n  \r\n        const isMatchingWeek =\r\n          recurringClass.isEveryWeek ||\r\n          (recurringClass.isEven && currentWeekParity === 'even') ||\r\n          (!recurringClass.isEven && currentWeekParity === 'odd');\r\n  \r\n        if (isMatchingWeek) {\r\n          weeklySchedule[remapDayIndex(recurringClass.recurrenceDay)].push({\r\n            ...classData,\r\n            recurrenceStartTime: normalizeTime(recurringClass.recurrenceStartTime),\r\n            recurrenceEndTime: normalizeTime(recurringClass.recurrenceEndTime),\r\n            teacherId: classData.teacherId,\r\n            teacherName: classData.teacherName,\r\n            teacherTitle: classData.teacherTitle,\r\n            roomNumber: classData.roomNumber,\r\n            roomId: classData.roomId,\r\n            isEveryWeek: recurringClass.isEveryWeek,\r\n            isEven: recurringClass.isEven,\r\n            isCanceled: isClassCanceledForWeek,\r\n            recurrenceDay: recurringClass.recurrenceDay,\r\n            classType: 'Recurring',\r\n          });\r\n        }\r\n      });\r\n  \r\n      // Process one-time classes\r\n      if (classData.oneTimeClasses && classData.oneTimeClasses.length > 0) {\r\n        classData.oneTimeClasses.forEach((oneTimeClass) => {\r\n          const convertToISODate = (dateString) => {\r\n            const [month, day, year] = dateString.split('/');\r\n            return new Date(`${year}-${month}-${day}`).toISOString(); // Return ISO format directly\r\n          };\r\n  \r\n          const isoDate = convertToISODate(oneTimeClass.oneTimeClassFullDate); // Convert to ISO format\r\n          const classDate = parseISO(isoDate);\r\n  \r\n          if (isWithinInterval(classDate, { start: weekStart, end: weekEnd })) {\r\n            const dayIndex = remapDayIndex(classDate.getDay()); // Apply remap for one-time classes\r\n            weeklySchedule[dayIndex].push({\r\n              ...classData,\r\n              date: classDate,\r\n              recurrenceStartTime: normalizeTime(oneTimeClass.oneTimeClassStartTime),\r\n              recurrenceEndTime: normalizeTime(oneTimeClass.oneTimeClassEndTime),\r\n              teacherId: classData.teacherId,\r\n              teacherName: classData.teacherName,\r\n              teacherTitle: classData.teacherTitle,\r\n              roomNumber: classData.roomNumber,\r\n              roomId: classData.roomId,\r\n              isCanceled: classData.isCanceled,\r\n              classType: \"One-Time\",\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  \r\n    weeklySchedule.forEach((dayClasses) => {\r\n      dayClasses.sort((a, b) => parseTime(a.recurrenceStartTime) - parseTime(b.recurrenceStartTime));\r\n    });\r\n  \r\n    return weeklySchedule;\r\n  };   \r\n\r\n  const schedule = organizeClassesByWeek();\r\n\r\n  const handleWeekChange = (direction) => setSelectedWeek((prevWeek) => addWeeks(prevWeek, direction));\r\n\r\n  const handleDeleteMeeting = async (classData) => {\r\n    try {\r\n  \r\n      if (!teacherId || !token) {\r\n        alert(\"Authentication details are missing. Please log in again.\");\r\n        return;\r\n      }\r\n  \r\n      const endpoint = `${process.env.REACT_APP_API_URL}/Main/deleteClass/${classData.classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n  \r\n      const response = await fetch(endpoint, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Unexpected server response');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (data.message === 'Class and all related data deleted successfully.') {\r\n        // Update classes state to remove deleted class\r\n        const updatedClasses = classes.filter(\r\n          (classItem) => classItem.classId !== classData.classId\r\n        );\r\n        setClasses(updatedClasses);\r\n  \r\n        alert(`Class ${classData.classTitle} has been deleted successfully`);\r\n      } else {\r\n        throw new Error('Unexpected server response');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting class:', error);\r\n      alert('An error occurred while deleting the class. Please try again.');\r\n    }\r\n  }\r\n\r\n  const handleCancelMeeting = async (classData) => {\r\n    const { classId, classType, isCanceled, recurrenceDay } = classData;\r\n    const endpointBase = `${process.env.REACT_APP_API_URL}/Main`;\r\n    let endpoint = '';\r\n    let method = 'POST';\r\n    let requestBody = null;\r\n\r\n    // Calculate the target date based on the selected week and recurrenceDay\r\n    const calculateRecurrenceDate = () => {\r\n      const targetDate = new Date(selectedWeek); // Start with the selected week date\r\n      const currentDay = targetDate.getDay(); // Get the day of the week for the selected date\r\n      const targetDay = recurrenceDay === 0 ? 7 : recurrenceDay; // If recurrenceDay is 0 (Sunday), treat it as 7 (Sunday in JS)\r\n\r\n      // Adjust the targetDate to the next occurrence of the recurrenceDay\r\n      const dayDifference = targetDay - currentDay;\r\n      targetDate.setDate(targetDate.getDate() + dayDifference);\r\n\r\n      // Ensure the target date is within the correct week (handling edge cases where the recurrence would fall outside)\r\n      if (dayDifference <= 0) {\r\n        targetDate.setDate(targetDate.getDate()); // Move to the next week if the recurrence day is already past\r\n      }\r\n\r\n      return targetDate;\r\n    };\r\n    \r\n    try {\r\n      if (classType === 'One-Time') {\r\n        // Cancel or restore one-time class\r\n        endpoint = `${endpointBase}/cancelOrRestoreClassOneTime/${classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n        requestBody = null;\r\n      } \r\n      else if (classType === 'Recurring') {\r\n        // Cancel or restore recurring class\r\n        const recurrenceDate = calculateRecurrenceDate();\r\n        \r\n        if (isCanceled) {\r\n          // Restore recurring class if it is already canceled\r\n          endpoint = `${endpointBase}/restoreRecurringClass/${classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n          requestBody = format(recurrenceDate, 'yyyy-MM-dd');\r\n        } else {\r\n          // Cancel recurring class\r\n          endpoint = `${endpointBase}/cancelRecurringClass/${classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n          requestBody = format(recurrenceDate, 'yyyy-MM-dd');\r\n        }\r\n      } else {\r\n        throw new Error('Unknown class type');\r\n      }\r\n  \r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: requestBody ? JSON.stringify(requestBody) : null,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update class: ${response.statusText}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      if (data.message.includes(\"successfully\")) {\r\n        // Update the status of the class\r\n  \r\n        alert(`Class ${isCanceled ? 'restored' : 'canceled'} successfully.`);\r\n      } else {\r\n        throw new Error('Unexpected response message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating class:', error);\r\n      alert('An error occurred while updating the class. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"weekly-schedule-container\">\r\n      {errorMessage && <div className=\"weekly-schedule-error-message\">{errorMessage}</div>}\r\n\r\n      <div className=\"weekly-schedule-week-selector\">\r\n        <button className=\"weekly-schedule-button\" onClick={() => handleWeekChange(-1)}>Previous Week</button>\r\n        <span className=\"weekly-schedule-date-range\">\r\n          {format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), 'MMM d')} -{' '}\r\n          {format(endOfWeek(selectedWeek, { weekStartsOn: 1 }), 'MMM d')}\r\n        </span>\r\n        <button className=\"weekly-schedule-button\" onClick={() => handleWeekChange(1)}>Next Week</button>\r\n      </div>\r\n\r\n      <div className=\"weekly-schedule-week\">\r\n        {daysOfWeek.map((day, index) => (\r\n          <div key={index} className=\"weekly-schedule-day-column\">\r\n            <h3 className=\"weekly-schedule-day-title\">{day}</h3>\r\n            {schedule[index].length > 0 ? (\r\n              schedule[index].map((classData, idx) => (\r\n                <div key={idx} className={`weekly-schedule-class-card weekly-schedule-${classData.classType.toLowerCase()}`}>\r\n                  <h4 className=\"weekly-schedule-class-title\">{classData.classTitle}</h4>\r\n                  <Link\r\n                    to={`/classroom/${classData.campusName}/${classData.roomNumber}/${classData.roomId}`}\r\n                    className=\"classroom-number\"\r\n                  >\r\n                    {classData.roomNumber}\r\n                  </Link>\r\n                  <p className=\"weekly-schedule-class-time\">\r\n                    {format(parseISO(`2000-01-01T${classData.recurrenceStartTime}`), 'HH:mm')} -{' '}\r\n                    {format(parseISO(`2000-01-01T${classData.recurrenceEndTime}`), 'HH:mm')}\r\n                  </p>\r\n                  {classData.isCanceled && (<span className=\"\">Cancelled</span>)}\r\n                  <Link\r\n                    to={`/teacher/${classData.teacherName}/${classData.teacherTitle}/${classData.teacherId}`}\r\n                    className=\"weekly-schedule-class-teacher\"\r\n                  >\r\n                    {classData.teacherName}\r\n                  </Link>\r\n                  <div className=\"class-card-buttons\">\r\n                    {isLoggedIn && teacherId === classData.teacherId && (\r\n                      <button\r\n                        className=\"cancel-meeting-button\"\r\n                        onClick={() => handleCancelMeeting(classData)}>\r\n                        {classData.isCanceled ? \"Restore Meeting\" : \"Cancel Meeting\"}\r\n                      </button>\r\n                    )}\r\n\r\n                    {isLoggedIn && teacherId === classData.teacherId && (\r\n                      <button\r\n                        className=\"delete-meeting-button\"\r\n                        onClick={() => handleDeleteMeeting(classData)}\r\n                      >\r\n                        Delete Meeting\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p className=\"weekly-schedule-no-classes\">No classes</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeeklySchedule;\r\n","export const ScheduleType = {\r\n    TEACHER: 'TEACHER',\r\n    ROOM: 'ROOM',\r\n}","import rmsPhoto from '../resources/buildingPhotos/wydzial-rms-slide.jpg';\r\n\r\nexport const campusData = {\r\n    \"MS\": {\r\n        fullName: \"Wydział Matematyki Stosowanej\",\r\n        mapsEmbedSrc: \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2549.043926603353!2d18.677463113142103!3d50.29110789870408!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47113101aa29eacb%3A0xb264c95270614eda!2sPolitechnika%20%C5%9Al%C4%85ska%2C%20Wydzia%C5%82%20Matematyki%20Stosowanej!5e0!3m2!1sen!2spl!4v1733085254800!5m2!1sen!2spl\",\r\n        imageSrc: rmsPhoto\r\n    },\r\n  };\r\n  \r\nexport default campusData;\r\n  ","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport WeeklySchedule from '../components/WeeklySchedule';\r\nimport { ScheduleType } from '../data/Enums';\r\nimport campusData from '../data/CampusData';\r\n\r\nfunction Classroom() {\r\n  const { campus, number, id } = useParams();\r\n  const campusInfo = campusData[campus]; // Retrieve the data for the specific campus\r\n\r\n  return (\r\n    <div className=\"classroom-page-container\">\r\n      {/* Campus Name and Classroom Information */}\r\n      <div className=\"classroom-page-header\">\r\n        <h2 className=\"classroom-page-title\">{campusInfo.fullName}</h2>\r\n        <div className=\"classroom-page-info\">\r\n          <h1 className=\"classroom-page-classroom-number\">{number}</h1>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Classroom Weekly Schedule */}\r\n      <div className=\"classroom-page-schedule-section\">\r\n        <h2 className=\"classroom-page-schedule-title\">Classroom Weekly Schedule</h2>\r\n        <WeeklySchedule id={id} scheduleType={ScheduleType.ROOM} />\r\n      </div>\r\n\r\n      {/* Campus Info Section */}\r\n      <div className=\"classroom-page-campus-info-section\">\r\n        <div className=\"classroom-page-google-maps\">\r\n          <h3 className=\"classroom-page-google-maps-title\">Campus Location</h3>\r\n          <iframe\r\n            src={campusInfo.mapsEmbedSrc}\r\n            width=\"600\"\r\n            height=\"450\"\r\n            style={{ border: '0' }}\r\n            allowFullScreen=\"\"\r\n            loading=\"lazy\"\r\n            referrerPolicy=\"no-referrer-when-downgrade\"\r\n            title={`Google Maps embed showing the location of ${campus}`}\r\n          ></iframe>\r\n        </div>\r\n\r\n        <div className=\"classroom-page-campus-image\">\r\n          <h3 className=\"classroom-page-campus-image-title\">Campus Image</h3>\r\n          <img\r\n            src={campusInfo.imageSrc}\r\n            alt={`${campus} campus`}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* MapHelper QR Code Section */}\r\n      <div className=\"classroom-page-maphelper-section\">\r\n        <h3 className=\"classroom-page-maphelper-title\">Get MapHelper App</h3>\r\n        <a href=\"https://arsenimokhau.github.io/Map-Helper/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img\r\n            src={require('../resources/maphelper/qr.png')}\r\n            alt=\"QR Code for MapHelper\"\r\n            className=\"classroom-page-maphelper-qr\"\r\n            style={{ width: '200px', height: '200px' }} // Adjust size as needed\r\n          />\r\n        </a>\r\n        <p>Scan the QR code or click it to open the MapHelper application.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Classroom;","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n"],"names":["endOfWeek","date","options","defaultOptions","getDefaultOptions","weekStartsOn","locale","_date","toDate","in","day","getDay","diff","setDate","getDate","setHours","addWeeks","amount","addDays","_ref","id","scheduleType","refreshTrigger","loading","setLoading","useState","classes","setClasses","isLoggedIn","teacherId","token","useUser","errorMessage","setErrorMessage","selectedWeek","setSelectedWeek","Date","daysOfWeek","fetchClasses","useCallback","async","endpoint","ScheduleType","TEACHER","ROOM","Error","response","fetch","ok","statusText","data","json","error","console","useEffect","schedule","organizeClassesByWeek","weekStart","startOfWeek","weekEnd","normalizeTime","time","parseTime","parseISO","currentWeekParity","startDate","daysSinceStart","Math","floor","calculateWeekParity","weeklySchedule","map","remapDayIndex","dayIndex","forEach","classData","recurringClasses","recurringClass","isClassCanceledForWeek","canceledDates","some","canceledDate","isoDate","dateString","month","year","split","toISOString","convertToISODate","parsedCanceledDate","isWithinInterval","start","end","isEveryWeek","isEven","recurrenceDay","push","recurrenceStartTime","recurrenceEndTime","teacherName","teacherTitle","roomNumber","roomId","isCanceled","classType","oneTimeClasses","length","oneTimeClass","oneTimeClassFullDate","classDate","oneTimeClassStartTime","oneTimeClassEndTime","dayClasses","sort","a","b","handleWeekChange","direction","prevWeek","handleCancelMeeting","classId","endpointBase","requestBody","recurrenceDate","calculateRecurrenceDate","targetDate","currentDay","dayDifference","format","method","headers","body","JSON","stringify","message","includes","alert","_jsx","Spinner","_jsxs","className","children","onClick","index","idx","toLowerCase","classTitle","Link","to","campusName","updatedClasses","filter","classItem","handleDeleteMeeting","fullName","mapsEmbedSrc","imageSrc","campus","number","useParams","campusInfo","campusData","WeeklySchedule","src","width","height","style","border","allowFullScreen","referrerPolicy","title","alt","href","target","rel","require","isNaN","constructFrom","NaN"],"sourceRoot":""}