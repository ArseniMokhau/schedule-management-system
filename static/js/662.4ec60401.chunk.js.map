{"version":3,"file":"static/js/662.4ec60401.chunk.js","mappings":"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","sources":["../node_modules/date-fns/endOfWeek.js","../node_modules/date-fns/addWeeks.js","components/WeeklySchedule.js","data/Enums.js","data/TeacherPhotos.js","data/Titles.js","pages/Teacher.js","../node_modules/date-fns/addDays.js"],"sourcesContent":["import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfWeek} function options.\n */\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport function endOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setDate(_date.getDate() + diff);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfWeek;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link addWeeks} function options.\n */\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of weeks to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n * @param options - An object with options\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount, options) {\n  return addDays(date, amount * 7, options);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { format, startOfWeek, endOfWeek, parseISO, isWithinInterval, addWeeks } from 'date-fns';\r\nimport { ScheduleType } from '../data/Enums';\r\nimport { useUser } from '../contexts/UserContext';\r\n\r\nfunction WeeklySchedule({ id, scheduleType, refreshTrigger }) {\r\n  const [classes, setClasses] = useState([]);\r\n  const { isLoggedIn, teacherId, token} = useUser();\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [selectedWeek, setSelectedWeek] = useState(new Date(), 'Europe/Warsaw');\r\n\r\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n  const fetchClasses = useCallback(async () => {\r\n    let endpoint;\r\n\r\n    switch (scheduleType) {\r\n      case ScheduleType.TEACHER:\r\n        endpoint = `${process.env.REACT_APP_API_URL}/Main/${id}/room/all`;\r\n        break;\r\n      case ScheduleType.ROOM:\r\n        endpoint = `${process.env.REACT_APP_API_URL}/Main/classes/${id}/id`;\r\n        break;\r\n      // Future-proofing\r\n      default:\r\n        throw new Error('Invalid schedule type');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(endpoint);\r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching classes: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      setClasses(data);\r\n      setErrorMessage(null);\r\n    } catch (error) {\r\n      console.error('Error fetching classes:', error);\r\n      setErrorMessage('Failed to load class data. Please try again later.');\r\n    }\r\n  }, [id, scheduleType]);\r\n\r\n  useEffect(() => {\r\n    fetchClasses();\r\n  }, [fetchClasses, refreshTrigger]);\r\n\r\n  const organizeClassesByWeek = () => {\r\n    const weekStart = startOfWeek(selectedWeek, { weekStartsOn: 1 });\r\n    const weekEnd = endOfWeek(selectedWeek, { weekStartsOn: 1 });\r\n  \r\n    const normalizeTime = (time) => (time === \"1.00:00:00\" ? \"24:00:00\" : time);\r\n  \r\n    const parseTime = (time) => parseISO(`2000-01-01T${normalizeTime(time)}`);\r\n  \r\n    const calculateWeekParity = (date) => {\r\n      const startDate = new Date(2024, 0, 1); // January 1, 2024\r\n      const daysSinceStart = Math.floor((date - startDate) / (1000 * 60 * 60 * 24));\r\n      const weekNumber = Math.floor(daysSinceStart / 7) + 1;\r\n      return weekNumber % 2 === 0 ? \"even\" : \"odd\";\r\n    };\r\n  \r\n    const currentWeekParity = calculateWeekParity(selectedWeek); // Determine parity of selected week\r\n  \r\n    const weeklySchedule = daysOfWeek.map(() => []);\r\n  \r\n    const remapDayIndex = (dayIndex) => (dayIndex === 0 ? 6 : dayIndex - 1);\r\n  \r\n    classes.forEach((classData) => {\r\n      // Process recurring classes\r\n      classData.recurringClasses.forEach((recurringClass) => {\r\n        const convertToISODate = (dateString) => {\r\n          const [month, day, year] = dateString.split('/');\r\n          return new Date(`${year}-${month}-${day}`).toISOString(); // Return ISO format directly\r\n        };\r\n  \r\n        const isClassCanceledForWeek = recurringClass.canceledDates.some((canceledDate) => {\r\n          const isoDate = convertToISODate(canceledDate); // Convert to ISO format\r\n          const parsedCanceledDate = parseISO(isoDate); // Parse the ISO date\r\n  \r\n          return isWithinInterval(parsedCanceledDate, { start: weekStart, end: weekEnd });\r\n        });\r\n  \r\n        const isMatchingWeek =\r\n          recurringClass.isEveryWeek ||\r\n          (recurringClass.isEven && currentWeekParity === 'even') ||\r\n          (!recurringClass.isEven && currentWeekParity === 'odd');\r\n  \r\n        if (isMatchingWeek) {\r\n          weeklySchedule[remapDayIndex(recurringClass.recurrenceDay)].push({\r\n            ...classData,\r\n            recurrenceStartTime: normalizeTime(recurringClass.recurrenceStartTime),\r\n            recurrenceEndTime: normalizeTime(recurringClass.recurrenceEndTime),\r\n            teacherId: classData.teacherId,\r\n            teacherName: classData.teacherName,\r\n            teacherTitle: classData.teacherTitle,\r\n            roomNumber: classData.roomNumber,\r\n            roomId: classData.roomId,\r\n            isEveryWeek: recurringClass.isEveryWeek,\r\n            isEven: recurringClass.isEven,\r\n            isCanceled: isClassCanceledForWeek,\r\n            recurrenceDay: recurringClass.recurrenceDay,\r\n            classType: 'Recurring',\r\n          });\r\n        }\r\n      });\r\n  \r\n      // Process one-time classes\r\n      if (classData.oneTimeClasses && classData.oneTimeClasses.length > 0) {\r\n        classData.oneTimeClasses.forEach((oneTimeClass) => {\r\n          const convertToISODate = (dateString) => {\r\n            const [month, day, year] = dateString.split('/');\r\n            return new Date(`${year}-${month}-${day}`).toISOString(); // Return ISO format directly\r\n          };\r\n  \r\n          const isoDate = convertToISODate(oneTimeClass.oneTimeClassFullDate); // Convert to ISO format\r\n          const classDate = parseISO(isoDate);\r\n          console.log(isoDate); // Check the isoDate\r\n          console.log(classDate); // Check the classDate\r\n  \r\n          if (isWithinInterval(classDate, { start: weekStart, end: weekEnd })) {\r\n            const dayIndex = remapDayIndex(classDate.getDay()); // Apply remap for one-time classes\r\n            weeklySchedule[dayIndex].push({\r\n              ...classData,\r\n              date: classDate,\r\n              recurrenceStartTime: normalizeTime(oneTimeClass.oneTimeClassStartTime),\r\n              recurrenceEndTime: normalizeTime(oneTimeClass.oneTimeClassEndTime),\r\n              teacherId: classData.teacherId,\r\n              teacherName: classData.teacherName,\r\n              teacherTitle: classData.teacherTitle,\r\n              roomNumber: classData.roomNumber,\r\n              roomId: classData.roomId,\r\n              isCanceled: classData.isCanceled,\r\n              classType: \"One-Time\",\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  \r\n    weeklySchedule.forEach((dayClasses) => {\r\n      dayClasses.sort((a, b) => parseTime(a.recurrenceStartTime) - parseTime(b.recurrenceStartTime));\r\n    });\r\n  \r\n    console.log(classes);\r\n    console.log(weeklySchedule);\r\n  \r\n    return weeklySchedule;\r\n  };   \r\n\r\n  const schedule = organizeClassesByWeek();\r\n\r\n  const handleWeekChange = (direction) => setSelectedWeek((prevWeek) => addWeeks(prevWeek, direction));\r\n\r\n  const handleDeleteMeeting = async (classData) => {\r\n    try {\r\n  \r\n      if (!teacherId || !token) {\r\n        alert(\"Authentication details are missing. Please log in again.\");\r\n        return;\r\n      }\r\n  \r\n      const endpoint = `${process.env.REACT_APP_API_URL}/Main/deleteClass/${classData.classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n  \r\n      const response = await fetch(endpoint, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Unexpected server response');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (data.message === 'Class and all related data deleted successfully.') {\r\n        // Update classes state to remove deleted class\r\n        const updatedClasses = classes.filter(\r\n          (classItem) => classItem.classId !== classData.classId\r\n        );\r\n        setClasses(updatedClasses);\r\n  \r\n        alert(`Class ${classData.classTitle} has been deleted successfully`);\r\n      } else {\r\n        throw new Error('Unexpected server response');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting class:', error);\r\n      alert('An error occurred while deleting the class. Please try again.');\r\n    }\r\n  }\r\n\r\n  const handleCancelMeeting = async (classData) => {\r\n    const { classId, classType, isCanceled } = classData;\r\n    const endpointBase = `${process.env.REACT_APP_API_URL}/Main`;\r\n    let endpoint = '';\r\n    let method = 'POST';\r\n    let requestBody = null;\r\n  \r\n    try {\r\n      if (classType === 'One-Time') {\r\n        // Cancel or restore one-time class\r\n        endpoint = `${endpointBase}/cancelOrRestoreClassOneTime/${classId}?teacherId=${teacherId}&teacherToken=${token}`;\r\n        requestBody = null;\r\n      } \r\n      /*\r\n      else if (classType === 'Recurring') {\r\n        // Cancel or restore recurring class\r\n        if (isCanceled) {\r\n          endpoint = `${endpointBase}/restoreRecurringClass/${classId}`;\r\n          requestBody = { restoreDate: classDate.toISOString() };\r\n        } else {\r\n          endpoint = `${endpointBase}/cancelRecurringClass/${classId}`;\r\n          requestBody = { cancelDate: classDate.toISOString() };\r\n        }\r\n      } else {\r\n        throw new Error('Unknown class type');\r\n      }\r\n      */\r\n  \r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: requestBody ? JSON.stringify(requestBody) : null,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update class: ${response.statusText}`);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      if (data.message === \"successfully.\") {\r\n        // Update the status of the class\r\n        const updatedClasses = classes.map((classItem) =>\r\n          classItem.classId === classId\r\n            ? { ...classItem, isCanceled: !isCanceled }\r\n            : classItem\r\n        );\r\n        setClasses(updatedClasses); // Update state with the new status\r\n  \r\n        alert(`Class ${isCanceled ? 'restored' : 'canceled'} successfully.`);\r\n      } else {\r\n        throw new Error('Unexpected response message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating class:', error);\r\n      alert('An error occurred while updating the class. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"weekly-schedule-container\">\r\n      {errorMessage && <div className=\"weekly-schedule-error-message\">{errorMessage}</div>}\r\n\r\n      <div className=\"weekly-schedule-week-selector\">\r\n        <button className=\"weekly-schedule-button\" onClick={() => handleWeekChange(-1)}>Previous Week</button>\r\n        <span className=\"weekly-schedule-date-range\">\r\n          {format(startOfWeek(selectedWeek, { weekStartsOn: 1 }), 'MMM d')} -{' '}\r\n          {format(endOfWeek(selectedWeek, { weekStartsOn: 1 }), 'MMM d')}\r\n        </span>\r\n        <button className=\"weekly-schedule-button\" onClick={() => handleWeekChange(1)}>Next Week</button>\r\n      </div>\r\n\r\n      <div className=\"weekly-schedule-week\">\r\n        {daysOfWeek.map((day, index) => (\r\n          <div key={index} className=\"weekly-schedule-day-column\">\r\n            <h3 className=\"weekly-schedule-day-title\">{day}</h3>\r\n            {schedule[index].length > 0 ? (\r\n              schedule[index].map((classData, idx) => (\r\n                <div key={idx} className={`weekly-schedule-class-card weekly-schedule-${classData.classType.toLowerCase()}`}>\r\n                  <h4 className=\"weekly-schedule-class-title\">{classData.classTitle}</h4>\r\n                  <Link\r\n                    to={`/classroom/${classData.campusName}/${classData.roomNumber}/${classData.roomId}`}\r\n                    className=\"classroom-number\"\r\n                  >\r\n                    {classData.roomNumber}\r\n                  </Link>\r\n                  <p className=\"weekly-schedule-class-time\">\r\n                    {format(parseISO(`2000-01-01T${classData.recurrenceStartTime}`), 'HH:mm')} -{' '}\r\n                    {format(parseISO(`2000-01-01T${classData.recurrenceEndTime}`), 'HH:mm')}\r\n                  </p>\r\n                  {classData.isCanceled && (<span className=\"\">Cancelled</span>)}\r\n                  <Link\r\n                    to={`/teacher/${classData.teacherName}/${classData.teacherTitle}/${classData.teacherId}`}\r\n                    className=\"weekly-schedule-class-teacher\"\r\n                  >\r\n                    {classData.teacherName}\r\n                  </Link>\r\n                  <div className=\"class-card-buttons\">\r\n                    {isLoggedIn && teacherId === classData.teacherId && classData.classType === 'One-Time' && (\r\n                      <button\r\n                        className=\"cancel-meeting-button\"\r\n                        onClick={() => handleCancelMeeting(classData)}>\r\n                        {classData.isCanceled ? \"Restore Meeting\" : \"Cancel Meeting\"}\r\n                      </button>\r\n                    )}\r\n\r\n                    {isLoggedIn && teacherId === classData.teacherId && (\r\n                      <button\r\n                        className=\"delete-meeting-button\"\r\n                        onClick={() => handleDeleteMeeting(classData)}\r\n                      >\r\n                        Delete Meeting\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p className=\"weekly-schedule-no-classes\">No classes</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeeklySchedule;\r\n","export const ScheduleType = {\r\n    TEACHER: 'TEACHER',\r\n    ROOM: 'ROOM',\r\n}","// import zielPhoto from '../resources/teacherPhotos/ziel.jpg';\r\nimport defaultPhoto from '../resources/teacherPhotos/default-avatar-icon.jpg';\r\n\r\nexport const TeacherPhotos = {\r\n    \"Arseni\": defaultPhoto,\r\n    \"Default\": defaultPhoto\r\n  };\r\n  \r\n  export default TeacherPhotos;","export const TitleDictionary = {\r\n    \"Inżynier\": \"Inż.\",\r\n    \"Doktor\": \"Dr.\",\r\n    \"Profesor\": \"Prof.\",\r\n    \"Magister\": \"Mgr.\",\r\n  };\r\n  \r\n  export default TitleDictionary;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport WeeklySchedule from '../components/WeeklySchedule';\r\nimport { ScheduleType } from '../data/Enums';\r\nimport { TeacherPhotos } from '../data/TeacherPhotos';\r\nimport { TitleDictionary } from '../data/Titles';\r\n\r\nfunction Teacher() {\r\n  const { name, title, id } = useParams();\r\n\r\n  const shortTitle = TitleDictionary[title] || title;\r\n\r\n  return (\r\n    <div className=\"teacher-page\">\r\n      <div className=\"teacher-info\">\r\n        <img \r\n          src={TeacherPhotos[name] || TeacherPhotos['Default']} \r\n          alt={name} \r\n          className=\"teacher-photo\" \r\n        />\r\n        <div className=\"teacher-details\">\r\n          <h1>{name} <span className=\"teacher-title\">{shortTitle}</span></h1>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"schedule-section\">\r\n        <h1>Weekly Schedule</h1>\r\n        <WeeklySchedule id={id} scheduleType={ScheduleType.TEACHER} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Teacher;\r\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n"],"names":["endOfWeek","date","options","defaultOptions","getDefaultOptions","weekStartsOn","locale","_date","toDate","in","day","getDay","diff","setDate","getDate","setHours","addWeeks","amount","addDays","_ref","id","scheduleType","refreshTrigger","classes","setClasses","useState","isLoggedIn","teacherId","token","useUser","errorMessage","setErrorMessage","selectedWeek","setSelectedWeek","Date","daysOfWeek","fetchClasses","useCallback","async","endpoint","ScheduleType","TEACHER","ROOM","Error","response","fetch","ok","statusText","data","json","error","console","useEffect","schedule","organizeClassesByWeek","weekStart","startOfWeek","weekEnd","normalizeTime","time","parseTime","parseISO","currentWeekParity","startDate","daysSinceStart","Math","floor","calculateWeekParity","weeklySchedule","map","remapDayIndex","dayIndex","forEach","classData","recurringClasses","recurringClass","isClassCanceledForWeek","canceledDates","some","canceledDate","isoDate","dateString","month","year","split","toISOString","convertToISODate","parsedCanceledDate","isWithinInterval","start","end","isEveryWeek","isEven","recurrenceDay","push","recurrenceStartTime","recurrenceEndTime","teacherName","teacherTitle","roomNumber","roomId","isCanceled","classType","oneTimeClasses","length","oneTimeClass","oneTimeClassFullDate","classDate","log","oneTimeClassStartTime","oneTimeClassEndTime","dayClasses","sort","a","b","handleWeekChange","direction","prevWeek","_jsxs","className","children","_jsx","onClick","format","index","idx","toLowerCase","classTitle","Link","to","campusName","classId","requestBody","method","headers","body","JSON","stringify","message","updatedClasses","classItem","alert","handleCancelMeeting","filter","handleDeleteMeeting","TeacherPhotos","defaultPhoto","TitleDictionary","name","title","useParams","shortTitle","src","alt","WeeklySchedule","isNaN","constructFrom","NaN"],"sourceRoot":""}