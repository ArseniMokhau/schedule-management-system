{"version":3,"file":"static/js/688.041b1574.chunk.js","mappings":"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","sources":["components/Map.js","components/TeacherList.js","pages/Home.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { toZonedTime } from 'date-fns-tz';\r\nimport { parseISO, isWithinInterval, format, setMinutes, setHours } from 'date-fns';\r\n\r\nfunction Map() {\r\n  const [currentBuilding, setCurrentBuilding] = useState(null);\r\n  const [currentFloor, setCurrentFloor] = useState(null);\r\n  const [classroomStatus, setClassroomStatus] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [selectedTime, setSelectedTime] = useState(new Date());\r\n  const [fetchedClasses, setFetchedClasses] = useState([]);\r\n\r\n  const fetchRoomData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/Main/room/all`);\r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching rooms: ${response.statusText}`);\r\n      }\r\n      const rooms = await response.json();\r\n\r\n      const groupedByFloor = rooms.reduce((acc, room) => {\r\n        const floorNumber = parseInt(room.RoomNumber.charAt(0), 10); \r\n        if (!acc[floorNumber]) {\r\n          acc[floorNumber] = [];\r\n        }\r\n        acc[floorNumber].push({\r\n          number: room.RoomNumber,\r\n          status: 'empty',  \r\n          roomId: room.RoomId,\r\n          campusName: 'MS'  \r\n        });\r\n        return acc;\r\n      }, {});\r\n\r\n      const building = {\r\n        name: 'MS',\r\n        fullName: 'WydziaÅ‚ Matematyki Stosowanej',\r\n        floors: Object.keys(groupedByFloor)\r\n          .map(floorNumber => ({\r\n            floorNumber: parseInt(floorNumber, 10),\r\n            classrooms: groupedByFloor[floorNumber]\r\n          }))\r\n          .sort((a, b) => a.floorNumber - b.floorNumber)\r\n      };\r\n\r\n      setCurrentBuilding(building);\r\n      setCurrentFloor(building.floors[0]); \r\n      setClassroomStatus(building.floors[0]?.classrooms || []);\r\n      setErrorMessage(null);\r\n    } catch (error) {\r\n      console.error('Error fetching room data:', error);\r\n      setErrorMessage('Failed to fetch room data. Please try again later.');\r\n    }\r\n  }, []);\r\n\r\n  const fetchClassData = useCallback(async () => {\r\n    try {\r\n      // Fetch recurring classes\r\n      const polandTime = toZonedTime(selectedDate, 'Europe/Warsaw');\r\n      const dayOfWeek = polandTime.getDay() % 7;\r\n  \r\n      const recurringResponse = await fetch(`${process.env.REACT_APP_API_URL}/Main/classes/day/dayOfWeek?dayOfWeek=${dayOfWeek}`);\r\n      if (!recurringResponse.ok) {\r\n        throw new Error(`Error fetching recurring classes: ${recurringResponse.statusText}`);\r\n      }\r\n      const recurringClasses = await recurringResponse.json();\r\n  \r\n      // Fetch one-time classes\r\n      const oneTimeResponse = await fetch(`${process.env.REACT_APP_API_URL}/Main/classes/date/OneTimeClass?date=${format(polandTime, 'yyyy-MM-dd')}`);\r\n      if (!oneTimeResponse.ok) {\r\n        throw new Error(`Error fetching one-time classes: ${oneTimeResponse.statusText}`);\r\n      }\r\n      const oneTimeClasses = await oneTimeResponse.json();\r\n\r\n      const combinedClasses = [...recurringClasses, ...oneTimeClasses].map(classData => {\r\n        if (classData.recurrenceEndTime === '1.00:00:00') {\r\n          classData.recurrenceEndTime = '24:00:00';\r\n        }\r\n        return classData;\r\n      });\r\n  \r\n      setFetchedClasses(combinedClasses);\r\n      setErrorMessage(null);\r\n    } catch (error) {\r\n      console.error('Error fetching class data:', error);\r\n      setErrorMessage('Failed to fetch class data. Please try again later.');\r\n    }\r\n  }, [selectedDate]);  \r\n\r\n  const filterClassroomsByTime = useCallback(() => {\r\n    // Mapping of days to their corresponding day numbers\r\n    const dayMapping = {\r\n      Sunday: 0,\r\n      Monday: 1,\r\n      Tuesday: 2,\r\n      Wednesday: 3,\r\n      Thursday: 4,\r\n      Friday: 5,\r\n      Saturday: 6,\r\n    };\r\n  \r\n    const calculateWeekParity = (date) => {\r\n      const startDate = new Date(2024, 0, 1); // January 1, 2024\r\n      const daysSinceStart = Math.floor((date - startDate) / (1000 * 60 * 60 * 24));\r\n      const weekNumber = Math.floor(daysSinceStart / 7) + 1;\r\n      return weekNumber % 2 === 0 ? \"even\" : \"odd\";\r\n    };\r\n  \r\n    const polandTime = toZonedTime(new Date(selectedDate.setHours(selectedTime.getHours(), selectedTime.getMinutes())), 'Europe/Warsaw');\r\n    const selectedDateString = polandTime.toISOString().split('T')[0];\r\n    const dayOfWeek = polandTime.getDay() % 7;\r\n  \r\n    const activeClassrooms = [];\r\n    const currentWeekParity = calculateWeekParity(polandTime);\r\n  \r\n    fetchedClasses.forEach(classData => {\r\n      const {\r\n        roomNumber,\r\n        recurrenceStartTime,\r\n        recurrenceEndTime,\r\n        recurrenceDay,\r\n        teacherName,\r\n        teacherId,\r\n        teacherTitle,\r\n        classTitle,\r\n        canceledDates,\r\n        isEveryWeek,\r\n        isEven,\r\n        oneTimeClassFullDate,\r\n        oneTimeClassStartTime,\r\n        oneTimeClassEndTime,\r\n        isCanceled,\r\n      } = classData;\r\n  \r\n      if (oneTimeClassFullDate) {\r\n        if (oneTimeClassFullDate.includes(selectedDateString)) {\r\n          const startTime = parseISO(`${selectedDateString}T${oneTimeClassStartTime[0]}`);\r\n          const endTime = parseISO(`${selectedDateString}T${oneTimeClassEndTime[0]}`);\r\n          if (isCanceled === \"False\") {\r\n            if (isWithinInterval(polandTime, { start: startTime, end: endTime })) {\r\n              activeClassrooms.push({\r\n                roomNumber,\r\n                teacherName,\r\n                teacherId,\r\n                teacherTitle,\r\n                classTitle,\r\n                status: 'taken',\r\n                canceledNotice: null,\r\n              });\r\n            }\r\n          }\r\n          else {  \r\n            if (isWithinInterval(polandTime, { start: startTime, end: endTime })) {\r\n              activeClassrooms.push({\r\n                roomNumber,\r\n                teacherName,\r\n                teacherId,\r\n                teacherTitle,\r\n                classTitle,\r\n                status: 'canceled',\r\n                canceledNotice: 'Class is canceled',\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        const recurrenceDayNumber = dayMapping[recurrenceDay];\r\n  \r\n        if (recurrenceDayNumber === dayOfWeek) {\r\n          const startTime = parseISO(`${selectedDateString}T${recurrenceStartTime}`);\r\n          const endTime = parseISO(`${selectedDateString}T${recurrenceEndTime}`);\r\n  \r\n          if (isWithinInterval(polandTime, { start: startTime, end: endTime })) {\r\n            if (isEveryWeek === \"True\") {\r\n              const isCanceled = canceledDates.includes(format(polandTime, 'dd/MM/yyyy'));\r\n              activeClassrooms.push({\r\n                roomNumber,\r\n                teacherName,\r\n                teacherId,\r\n                teacherTitle,\r\n                classTitle,\r\n                status: isCanceled ? 'canceled' : 'taken',\r\n                canceledNotice: isCanceled ? 'Class is canceled today' : null,\r\n              });\r\n            } else {\r\n              if (currentWeekParity === (isEven === \"True\" ? \"even\" : \"odd\")) {\r\n                const isCanceled = canceledDates.includes(format(polandTime, 'dd/MM/yyyy'));\r\n                activeClassrooms.push({\r\n                  roomNumber,\r\n                  teacherName,\r\n                  teacherId,\r\n                  teacherTitle,\r\n                  classTitle,\r\n                  status: isCanceled ? 'canceled' : 'taken',\r\n                  canceledNotice: isCanceled ? 'Class is canceled today' : null,\r\n                });\r\n              } else {\r\n                activeClassrooms.push({\r\n                  roomNumber,\r\n                  teacherName,\r\n                  teacherId,\r\n                  teacherTitle,\r\n                  classTitle,\r\n                  status: 'empty',\r\n                  canceledNotice: null,\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  \r\n    const updatedClassroomStatus = currentFloor.classrooms.map(classroom => {\r\n      const activeClassroom = activeClassrooms.find(activeClass => activeClass.roomNumber === classroom.number);\r\n      return {\r\n        ...classroom,\r\n        status: activeClassroom ? activeClassroom.status : 'empty',\r\n        teacherName: activeClassroom?.teacherName || null,\r\n        teacherId: activeClassroom?.teacherId || null,\r\n        teacherTitle: activeClassroom?.teacherTitle || null,\r\n        classTitle: activeClassroom?.classTitle || null,\r\n        canceledNotice: activeClassroom?.canceledNotice || null,\r\n      };\r\n    });\r\n    setClassroomStatus(updatedClassroomStatus);\r\n  }, [currentFloor, fetchedClasses, selectedDate, selectedTime]);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchRoomData();\r\n  }, [fetchRoomData]);\r\n\r\n  useEffect(() => {\r\n    fetchClassData();\r\n  }, [fetchClassData, selectedDate]);\r\n\r\n  useEffect(() => {\r\n    if (currentFloor && fetchedClasses.length) {\r\n      filterClassroomsByTime();\r\n    }\r\n  }, [currentFloor, filterClassroomsByTime, fetchedClasses.length, selectedTime]);\r\n\r\n  const handleFloorChange = (floorNumber) => {\r\n    const selectedFloor = currentBuilding.floors.find(floor => floor.floorNumber === floorNumber);\r\n    setCurrentFloor(selectedFloor);\r\n  };\r\n\r\n  const handleDateChange = (event) => {\r\n    const newDate = new Date(event.target.value);\r\n    newDate.setHours(selectedTime.getHours(), selectedTime.getMinutes());\r\n    setSelectedDate(newDate);\r\n  }\r\n\r\n  const handleTimeChange = (event) => {\r\n    const minutes = event.target.value;\r\n    const hours = Math.floor(minutes / 60);\r\n    const newTime = setMinutes(setHours(selectedTime, hours), minutes % 60);\r\n    setSelectedTime(newTime);\r\n  };\r\n\r\n  const renderClassrooms = () => {\r\n    return classroomStatus.map((classroom, index) => (\r\n      <div key={index} className=\"classroom-container\">\r\n        <div className=\"classroom-header\">\r\n          <Link to={`/classroom/${classroom.campusName || 'MS'}/${classroom.number}/${classroom.roomId}`} className=\"classroom-number\">\r\n            {classroom.number}\r\n          </Link>\r\n          <span className={`status-circle ${classroom.status === 'taken' ? 'taken' : classroom.status === 'canceled' ? 'canceled' : 'empty'}`}></span>\r\n        </div>\r\n        <div className=\"classroom-details\">\r\n          {classroom.status === 'taken' ? (\r\n            <>\r\n              <Link to={`/teacher/${classroom.teacherName}/${classroom.teacherTitle}/${classroom.teacherId}`} className=\"teacher-name\">\r\n                {classroom.teacherName || 'No teacher'}\r\n              </Link>\r\n              <div className=\"class-title\">\r\n                {classroom.classTitle || 'No subject'}\r\n              </div>\r\n            </>\r\n          ) : classroom.status === 'canceled' ? (\r\n            <>\r\n              <Link to={`/teacher/${classroom.teacherName}/${classroom.teacherTitle}/${classroom.teacherId}`} className=\"teacher-name\">\r\n                {classroom.teacherName || 'No teacher'}\r\n              </Link>\r\n              <div className=\"class-title\">\r\n                {classroom.classTitle || 'No subject'}\r\n              </div>\r\n              <span className=\"canceled-notice\">{classroom.canceledNotice}</span>\r\n            </>\r\n          ) : (\r\n            <span className=\"classroom-number\">{'Empty'}</span>\r\n          )}\r\n        </div>\r\n        <div className=\"classroom-time\">\r\n          {classroom.recurrenceStartTime} - {classroom.recurrenceEndTime}\r\n        </div>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\n\r\n  const timeToMinutes = (time) => {\r\n    return time.getHours() * 60 + time.getMinutes();\r\n  };\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      <h2>{currentBuilding?.fullName}</h2>\r\n\r\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n\r\n      <div className=\"date-time-selector\">\r\n        <label>\r\n          Select Date:\r\n          <input type=\"date\" onChange={handleDateChange} value={format(selectedDate, 'yyyy-MM-dd')} />\r\n        </label>\r\n\r\n        <div className=\"time-slider\">\r\n          <label>Set Time:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={1435}\r\n            step={5}\r\n            value={timeToMinutes(selectedTime)}\r\n            onChange={handleTimeChange}\r\n          />\r\n          <span>{format(selectedTime, 'HH:mm')}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"floor-selector\">\r\n        {currentBuilding?.floors?.map(floor => (\r\n          <button key={floor.floorNumber} onClick={() => handleFloorChange(floor.floorNumber)}>\r\n            Floor {floor.floorNumber}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"classrooms-list\">\r\n        {renderClassrooms()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction TeacherList() {\r\n  const [teachers, setTeachers] = useState([]);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchTeachers = async () => {\r\n      try {\r\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/Main/teacher/all`);\r\n\r\n        if (!response.ok || response.headers.get('content-type')?.includes('text/html')) {\r\n          throw new Error('Failed to fetch teachers. Server might be redirecting or returning HTML.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setTeachers(data);\r\n      } catch (err) {\r\n        console.error('Error fetching teachers:', err);\r\n        setError('Failed to load teacher data. Please try again later.');\r\n      }\r\n    };\r\n\r\n    fetchTeachers();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div className=\"error-message\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"teacher-list-container\">\r\n      <button\r\n        className=\"toggle-button\"\r\n        onClick={() => setIsExpanded((prev) => !prev)}\r\n      >\r\n        {isExpanded ? 'Hide Teacher List' : 'Show Teacher List'}\r\n      </button>\r\n      {isExpanded && (\r\n        <div className=\"teacher-list\">\r\n          {teachers.length === 0 ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <div className=\"scrollable-teacher-list\">\r\n              {teachers.map((teacher) => (\r\n                <button\r\n                  key={teacher.TeacherId}\r\n                  className=\"teacher-button\"\r\n                  title={`${teacher.TeacherName} - ${teacher.TeacherTitle}`}\r\n                >\r\n                  <Link\r\n                    to={`/teacher/${teacher.TeacherName}/${teacher.TeacherTitle}/${teacher.TeacherId}`}\r\n                  >\r\n                    {teacher.TeacherName}\r\n                  </Link>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeacherList;","import React from 'react';\r\nimport Map from '../components/Map';\r\nimport TeacherList from '../components/TeacherList';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"content-container\">\r\n        <Map />\r\n        <TeacherList />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"names":["_currentBuilding$floo","currentBuilding","setCurrentBuilding","useState","currentFloor","setCurrentFloor","classroomStatus","setClassroomStatus","errorMessage","setErrorMessage","selectedDate","setSelectedDate","Date","selectedTime","setSelectedTime","fetchedClasses","setFetchedClasses","fetchRoomData","useCallback","async","_building$floors$","response","fetch","ok","Error","statusText","groupedByFloor","json","reduce","acc","room","floorNumber","parseInt","RoomNumber","charAt","push","number","status","roomId","RoomId","campusName","building","name","fullName","floors","Object","keys","map","classrooms","sort","a","b","error","console","fetchClassData","polandTime","toZonedTime","dayOfWeek","getDay","recurringResponse","recurringClasses","oneTimeResponse","format","oneTimeClasses","combinedClasses","classData","recurrenceEndTime","filterClassroomsByTime","dayMapping","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","setHours","getHours","getMinutes","selectedDateString","toISOString","split","activeClassrooms","currentWeekParity","date","startDate","daysSinceStart","Math","floor","calculateWeekParity","forEach","roomNumber","recurrenceStartTime","recurrenceDay","teacherName","teacherId","teacherTitle","classTitle","canceledDates","isEveryWeek","isEven","oneTimeClassFullDate","oneTimeClassStartTime","oneTimeClassEndTime","isCanceled","includes","startTime","parseISO","endTime","isWithinInterval","start","end","canceledNotice","updatedClassroomStatus","classroom","activeClassroom","find","activeClass","useEffect","length","_jsxs","className","children","_jsx","type","onChange","event","newDate","target","value","min","max","step","time","minutes","hours","newTime","setMinutes","onClick","selectedFloor","handleFloorChange","index","Link","to","_Fragment","teachers","setTeachers","isExpanded","setIsExpanded","setError","_response$headers$get","headers","get","data","err","fetchTeachers","prev","teacher","title","TeacherName","TeacherTitle","TeacherId","Map","TeacherList"],"sourceRoot":""}