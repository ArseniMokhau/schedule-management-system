{"version":3,"file":"static/js/390.1e472422.chunk.js","mappings":"oNAqIA,QAhIA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC7B,cAAEO,EAAa,aAAEC,EAAY,SAAEC,EAAQ,kBAAEC,IAAsBC,EAAAA,EAAAA,KAC/DC,GAAWC,EAAAA,EAAAA,MAoFjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,MAAA,QAAMC,SApFaC,UACrBC,EAAMC,iBAEN,IAEE,MAAMC,QAAiBC,MAAM,0EAAkD,CAC7EC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE9B,WAAUG,WAAUE,YAIvC0B,EAAcP,EAASG,QAAQK,IAAI,gBACzC,IAAIC,EAQJ,GALEA,EADEF,GAAeA,EAAYG,SAAS,0BACzBV,EAASW,aAETX,EAASY,OAGpBZ,EAASa,GACX,GAAoB,kBAATJ,GAA8B,iCAATA,EAAyC,CAEvE,MAAMK,QAAsBb,MAAM,uEAA+C,CAC/EC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE9B,WAAUG,eAG7BoC,QAAkBD,EAAcH,OAEtC,GAAIG,EAAcD,GAAI,CAOpB,GALA5B,GAAc,GACdC,EAAa6B,EAAUC,WACvB7B,EAAS4B,EAAUE,QAGfF,EAAUG,WAWZ,YADAlC,EAAS,8CATT,IACE,MAAMmC,GAAiBC,EAAAA,EAAAA,IAAML,EAAUG,WAAY,WAAY,IAAIG,MAAQC,cAC3ElC,EAAkB+B,EACpB,CAAE,MAAOI,GAGP,OAFAC,QAAQzC,MAAM,sBAAuBwC,EAAWE,cAChDzC,EAAS,mCAEX,CAOFM,EAAS,IACX,MAEEkC,QAAQzC,MAAM,gBAAiBgC,GAG3BA,GAAaA,EAAUU,QACzBzC,EAAS+B,EAAUU,SAGnBzC,EAAS,iCAGf,MAAWyB,EAAKgB,QACdzC,EAASyB,EAAKgB,SAEdzC,EAAS,mCAGXA,EAAS,wCAEb,CAAE,MAAO0C,GACPF,QAAQzC,MAAM,sBAAuB2C,EAAID,SACzCzC,EAAS,uCACX,GAMkCS,UAAU,sBAAqBC,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,SACEmC,KAAK,OACLC,MAAOpD,EACPqD,SAAWC,GAAMrD,EAAYqD,EAAEC,OAAOH,OACtCI,YAAY,WACZC,UAAQ,OAGZzC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,SACEmC,KAAK,WACLC,MAAOjD,EACPkD,SAAWC,GAAMlD,EAAYkD,EAAEC,OAAOH,OACtCI,YAAY,WACZC,UAAQ,OAGZzC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,SACEmC,KAAK,OACLC,MAAO/C,EACPgD,SAAWC,GAAMhD,EAASgD,EAAEC,OAAOH,OACnCI,YAAY,QACZC,UAAQ,MAGXlD,IAASS,EAAAA,EAAAA,KAAA,KAAG0C,MAAO,CAAEC,MAAO,OAAQzC,SAAEX,KACvCS,EAAAA,EAAAA,KAAA,UAAQmC,KAAK,SAAQjC,SAAC,iBAI9B,C","sources":["pages/Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { parse } from 'date-fns';\r\nimport { useUser } from '../contexts/UserContext';\r\n\r\nfunction Register() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [error, setError] = useState('');\r\n  const { setIsLoggedIn, setTeacherId, setToken, setExpirationDate } = useUser();\r\n  const navigate = useNavigate();\r\n\r\n  const handleRegister = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    try {\r\n      // Register the user\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/Main/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, title }),\r\n      });\r\n  \r\n      // Determine if response is JSON or plain text\r\n      const contentType = response.headers.get(\"Content-Type\");\r\n      let data;\r\n  \r\n      if (contentType && contentType.includes(\"application/json\")) {\r\n        data = await response.json(); // Parse JSON response\r\n      } else {\r\n        data = await response.text(); // Parse plain text response\r\n      }\r\n  \r\n      if (response.ok) {\r\n        if (typeof data === \"string\" && data === \"User registered successfully\") {\r\n          // Automatically log in after successful registration\r\n          const loginResponse = await fetch(`${process.env.REACT_APP_API_URL}/Main/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ username, password }),\r\n          });\r\n  \r\n          const loginData = await loginResponse.json();\r\n  \r\n          if (loginResponse.ok) {\r\n            // Update context and localStorage\r\n            setIsLoggedIn(true);\r\n            setTeacherId(loginData.teacherId);\r\n            setToken(loginData.token);\r\n          \r\n            // Check if expiration exists and is valid\r\n            if (loginData.expiration) {\r\n              try {\r\n                const expirationDate = parse(loginData.expiration, 'M/d/yyyy', new Date()).toISOString();\r\n                setExpirationDate(expirationDate);\r\n              } catch (parseError) {\r\n                console.error('Date parsing error:', parseError.message);\r\n                setError('Invalid expiration date received');\r\n                return; // Stop further execution since the expiration date is invalid\r\n              }\r\n            } else {\r\n              setError('Expiration date is missing in the response');\r\n              return; // Stop further execution\r\n            }\r\n          \r\n            // Redirect to home page after successful login\r\n            navigate('/');\r\n          } else {\r\n            // Log server error response for debugging\r\n            console.error('Server error:', loginData);\r\n          \r\n            // Display server message to the user, if provided\r\n            if (loginData && loginData.message) {\r\n              setError(loginData.message);\r\n            } else {\r\n              // Fallback error message if server doesn't provide one\r\n              setError('An error occurred during login');\r\n            }\r\n          }          \r\n        } else if (data.message) {\r\n          setError(data.message);\r\n        } else {\r\n          setError('Unexpected response format');\r\n        }\r\n      } else {\r\n        setError('An error occurred during registration');\r\n      }\r\n    } catch (err) {\r\n      console.error('Registration Error:', err.message);\r\n      setError('An error occurred. Please try again.');\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"login-register-wrapper\">\r\n      <form onSubmit={handleRegister} className=\"login-register-form\">\r\n        <h2>Register</h2>\r\n        <div className=\"form-element\">\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            placeholder=\"Username\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-element\">\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-element\">\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            placeholder=\"Title\"\r\n            required\r\n          />\r\n        </div>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <button type=\"submit\">Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"],"names":["username","setUsername","useState","password","setPassword","title","setTitle","error","setError","setIsLoggedIn","setTeacherId","setToken","setExpirationDate","useUser","navigate","useNavigate","_jsx","className","children","_jsxs","onSubmit","async","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","contentType","get","data","includes","json","text","ok","loginResponse","loginData","teacherId","token","expiration","expirationDate","parse","Date","toISOString","parseError","console","message","err","type","value","onChange","e","target","placeholder","required","style","color"],"sourceRoot":""}